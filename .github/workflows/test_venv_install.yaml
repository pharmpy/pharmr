on:
  push:
    branches:
      - add-tags-at-release

name: Test venv install

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout pharmr
        uses: actions/checkout@v3
        with:
          path: pharmr_repo

      - name: Checkout pharmpy
        uses: actions/checkout@v3
        with:
          repository: pharmpy/pharmpy
          path: pharmpy_repo

      - name: Set up Pharmpy release version
        working-directory: pharmpy_repo
        run: |
          git fetch
          git checkout -b release_latest "$(git rev-list --tags --max-count=1)"
          echo "pharmpy_version=`git rev-list --tags --max-count=1`" >> $GITHUB_ENV 
          git branch -v

      - name: Create venv
        working-directory: pharmpy_repo
        run: |
          python -m venv pharmpy_venv

      - name: Install Pharmpy in venv
        working-directory: pharmpy_repo
        run: |
          source pharmpy_venv/bin/activate
          pip install .

      - uses: r-lib/actions/setup-r@v1
        with:
          r-version: 'release'

      - uses: r-lib/actions/setup-pandoc@v1

      - name: Query dependencies
        working-directory: pharmr_repo
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Restore R package cache
        uses: actions/cache@v2
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      - name: Install system dependencies
        working-directory: pharmr_repo
        run: |
          while read -r cmd
          do
            eval sudo $cmd
          done < <(Rscript -e 'writeLines(remotes::system_requirements("ubuntu", "20.04"))')

      - name: Install dependencies
        working-directory: pharmr_repo
        run: |
          remotes::install_deps(dependencies = TRUE)
          remotes::install_cran("rcmdcheck")
          remotes::install_github('rstudio/reticulate')
        shell: Rscript {0}

      - name: Install pharmr
        working-directory: pharmr_repo
        run: |
          remotes::install_local(force=TRUE)
        shell: Rscript {0}

      - name: Test Pharmpy
        working-directory: pharmr_repo
        run: |
          reticulate::use_python('../pharmpy_venv/bin')
          pharmr::print_pharmpy_version()
        shell: Rscript {0}

      - name: Install deploy dependencies
        run: |
          install.packages("here")
          install.packages("tidyverse")
          install.packages("devtools")
        shell: Rscript {0}

      - name: Check
        working-directory: pharmr_repo
        env:
          _R_CHECK_CRAN_INCOMING_REMOTE_: false
        run: |
          options(crayon.enabled = TRUE)
          rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: results-cran
          path: check



